<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>什么东东的博客</title>
  
  <subtitle>搞笑认真</subtitle>
  <link href="/quandongli.github.io/atom.xml" rel="self"/>
  
  <link href="https://quandongli.github.io/"/>
  <updated>2020-01-09T12:22:21.246Z</updated>
  <id>https://quandongli.github.io/</id>
  
  <author>
    <name>CodeWhat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础之四种基础类型</title>
    <link href="https://quandongli.github.io/post/2f86de21.html"/>
    <id>https://quandongli.github.io/post/2f86de21.html</id>
    <published>2020-01-09T12:19:52.000Z</published>
    <updated>2020-01-09T12:22:21.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java数据类型概述"><a href="#java数据类型概述" class="headerlink" title="java数据类型概述"></a>java数据类型概述</h2><p>在java语言中有四类八种基本类型分别是：</p><ol><li>整型<ul><li>long</li><li>int</li><li>short</li><li>byte</li></ul></li><li>浮点型<ul><li>double</li><li>float</li></ul></li><li>char</li><li>boolean<a id="more"></a><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2>整型表示是没有小数部分的数值。在java中有定义了四种整型常量，他们表示范围从小到大分别是：</li></ol><ul><li>长整型long：占8个字节</li><li>整型int：占4个字节</li><li>短整型short：占2个字节</li><li>byte：占1个字节</li></ul><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768 ~ 32767</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128-127</td></tr></tbody></table><p>在java中整数类型与c语言中有几个不同点</p><ol><li>第一个不同点是，在Java语言中支持在为数值字面量加下划线，方便阅读，比如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1000_000_000</span>);<span class="comment">//将输出为1000000000</span></span><br></pre></td></tr></table></figure></li><li>Java中每个类型所占的字节大小不会随着运行系统的变化而变化。这主要要是为了满足Java的设计目标：一处编译、处处运行。</li><li>第二个不同点，也是重要的不同点是，在Java语言中不支持无符号（unsigned）类型的整型，在Java中如果要表示一个无符号类型的数字将会是一个比较麻烦的事情（一般是通过升级类型，比如将byte类型升级为int类型，将int类型转换为long类型或者通过位运算）。</li></ol><p><strong>关于unsigned类型在以后遇到再进行详细讨论</strong></p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>所谓的浮点类型就是可以表示小数部分的数值，在Java中有两种浮点类型：<br>|类型|存储需求|取值范围|<br>|:-:|:-:|:-:|<br>|float|4字节|大约为+-3.40282347E+38F(有效位数为6~7位)|<br>|double|8字节|大约1.79769313486231570E+308（有效位数为15位）|<br>double表示的这种数值精度是float类型的两倍，所以一般称float类型为单精度浮点类型，double类型为双精度浮点类型。一般情况下小数默认为double类型。可以在小数数值后面加上一个f或者F将该数值表示为float类型。double类型可以在小数数值后面添加d或者D表示（也可以不加，直接默认）。</p><h2 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h2><p>&emsp;&emsp;char类型表示的是一个在字符，占两个字节，其的字面量值是用一个单引号引起来的一个字符，如’a’，但是不能用单引号引两个或以上的字符，如：’ab’,如果需要引两个或以上的字符这需要用一对双引号，这样表示的将会是字符串。<br>&emsp;&emsp;在Java中char类型是一个采用UTF-16编码表示Unicode码点的代码单元，这样做的原因是不同的编码方案下可能对应着不同的字母，且有些字母短一个字节就可以表示，但是有写字节表示比较长需要两个字节或多个字节，于是java设计者为了避免这样的事情发生（Java的设计思想是不管程序在哪运行，运行的结果都要一样），在初期效果确实达到了，但是随着中国等国家的表意文字的出现，这种设计也随之崩溃。于是乎，这种设计使得Java中的char类型并不是一个“称职”的类型，比如在字符串的一些操作中很容易产生错误，所以现在都<strong>强烈建议不要在java中使用char类型</strong></p><h2 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h2><p>Boolean（布尔）类型只有两个值：false以及true，用来判断逻辑条件。这里需要注意的是在java中<strong>整形和布尔值之间不能进行相互交换</strong>，在c语言中false可以用0来表示，true可以用1来表示，但是在Java中却不可以这样表示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java数据类型概述&quot;&gt;&lt;a href=&quot;#java数据类型概述&quot; class=&quot;headerlink&quot; title=&quot;java数据类型概述&quot;&gt;&lt;/a&gt;java数据类型概述&lt;/h2&gt;&lt;p&gt;在java语言中有四类八种基本类型分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整型&lt;ul&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点型&lt;ul&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="-java" scheme="https://quandongli.github.io/categories/java/"/>
    
    
      <category term="-Java -基础类型" scheme="https://quandongli.github.io/tags/Java-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>web入门课程之基础知识</title>
    <link href="https://quandongli.github.io/post/a594f8b3.html"/>
    <id>https://quandongli.github.io/post/a594f8b3.html</id>
    <published>2020-01-03T04:22:51.000Z</published>
    <updated>2020-01-05T04:37:48.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><a id="more"></a><ol><li>C/S架构:Client/Server 客户端/服务器端<blockquote><p>在用户本地有一个客户端程序，在远程有一个服务器端程序<br>例如：QQ、迅雷。。。<br>缺点：</p><ol><li>开发、安装、部署、维护麻烦。<br>优点：</li><li>用户体验好</li></ol></blockquote></li><li>B/S：Browser/Server 浏览器/服务器端<blockquote><p>只需要一个浏览器，用户通过不同的网址（url），访问不同的服务器端程序<br>优点：</p><ol><li>开发、安装、部署、维护简单。<br>缺点：</li><li>如果应用过大，用户的体验可能会受到影响</li><li>对硬件要求过高</li></ol></blockquote><h1 id="B-S架构简介"><a href="#B-S架构简介" class="headerlink" title="B/S架构简介"></a>B/S架构简介</h1></li><li>资源分类<ol><li>静态资源<ul><li>使用静态网页技术开发发布的资源</li><li>特点：1. 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li><li>如：文本、图片、音频、视频、HTML、CSS、JavaScript</li></ul></li><li>动态资源<ul><li>使用动态网页及时发布的资源</li><li>特点：1. 所有用户访问，得到的结果可能不一样。</li><li><ol start="2"><li>如果用户请求的是动态资源，那么服务器就会执行动态资源，转换为静态资源，再发送给浏览器。</li></ol></li><li>如：jsp/servlet、php、sap…</li></ul></li></ol></li></ol><h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><ul><li>HTML：用于搭建基础页面，展示页面</li><li>CSS：用户美化页面，布局页面</li><li>JavaScript：控制页面的元素，让页面有一些动态效果。<br></li></ul><img src="/quandongli.github.io/post/a594f8b3.htm/post/a594f8b3/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.jpg" class title="spaced title">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; title=&quot;软件架构&quot;&gt;&lt;/a&gt;软件架构&lt;/h1&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://quandongli.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web" scheme="https://quandongli.github.io/categories/%E5%89%8D%E7%AB%AF/web/"/>
    
    
      <category term="web" scheme="https://quandongli.github.io/tags/web/"/>
    
      <category term="html" scheme="https://quandongli.github.io/tags/html/"/>
    
  </entry>
  
</feed>
