<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>什么东东的博客</title>
  
  <subtitle>搞笑认真</subtitle>
  <link href="/quandongli.github.io/atom.xml" rel="self"/>
  
  <link href="https://quandongli.github.io/"/>
  <updated>2020-01-11T12:31:43.441Z</updated>
  <id>https://quandongli.github.io/</id>
  
  <author>
    <name>CodeWhat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础之字符串</title>
    <link href="https://quandongli.github.io/post/eea9faf9.html"/>
    <id>https://quandongli.github.io/post/eea9faf9.html</id>
    <published>2020-01-11T12:26:46.000Z</published>
    <updated>2020-01-11T12:31:43.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java中字符串是用双引号引起来的一串字符或unicode序列，例如：”hello”就是一个在字符串，Java中使用string类对字符串进行定义，例如：String str = “hello”即定义了一个在字符串str，且str的值是hello。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="取子串"><a href="#取子串" class="headerlink" title="取子串"></a>取子串</h3><p>substring(a,b)方法将字符串a位置开始起到b位置（不包含b位置）上的字符取出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello"</span>.substring(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//将会返回Hel</span></span><br></pre></td></tr></table></figure><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>将两个甚至多个字符串拼接成一个字符串有一下三个方法：</p><ol><li><p>a+b：将a和b两个字符串合并为一个字符串；当a、b中只有一个为字符串时，不为字符串的值也会转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello"</span>+ <span class="number">10</span>);<span class="comment">//将会输出Hello10​</span></span><br></pre></td></tr></table></figure></li><li><p>join(a,b)：将多个字符串进行拼接，并且以a在字符串作为分割；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.join(<span class="string">"! "</span>,<span class="string">"Hello"</span>,<span class="string">"World"</span>));<span class="comment">//将会输出Hello！world​</span></span><br></pre></td></tr></table></figure></li><li><p>repeat(n):将字符串重复n遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ystem.out.println(<span class="string">"Hello"</span>.repeat(<span class="number">2</span>));<span class="comment">//将会输出HelloHello​</span></span><br></pre></td></tr></table></figure><h3 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h3><p>在java中字符串实际上是不可变的，可以这样理解：虽然果篮里面可以放各种水果，但是苹果始终都是苹果，不会变成香蕉。这其实是java中的工作机制造成的。这将在文章中最后进行介绍。<br>既然Java中不允许对字符串的元素进行修改，那么我们从现有的字符串中选取出我们想要的在字符，然后再与其他的字符拼接字组成我们想要的字符串。<br>我们可以先用substring方法取处原字符串中需要保留的字符串，然后通过+将替换的字符串进行拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello"</span>.substring(<span class="number">0</span>,<span class="number">3</span>) + <span class="string">"p!"</span>);<span class="comment">//将会返回Help!​</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串是否相等"><a href="#判断字符串是否相等" class="headerlink" title="判断字符串是否相等"></a>判断字符串是否相等</h3><p>在java中判断字符串是否不可以用==判断两个字符是否相等，这判断的时两个字符串是否存储同一位置。<br>在Java中判段两个字符串是否相等可以使用以下两种方法：</p></li><li><p>s.equals(t):如果字符串s与t相等将会返回true，否则将会返回false（区分大小写）</p></li><li><p>s.equalsIgnoreCase(t):判断两个字符串是否相等，不区分大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello"</span>.equals(<span class="string">"hello"</span>));<span class="comment">//返回false​System.out.println("Hello".equalsIgnoreCase("hello"));//返回true</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串是否为空"><a href="#判断字符串是否为空" class="headerlink" title="判断字符串是否为空"></a>判断字符串是否为空</h3><p>在Java中定义一个空字符串有两种方式，对应了两种不同的判断空串的方法，他们之间的判断方法不可以错用。</p></li><li><p>“”：这种定义空串的方式，在计算机的“眼里”，他是有内容的（内容为空），有长度的(长度为0)，所以这种空串有以下两种方式进行判断：</p><ul><li>if(str.length() == 0)//判断长度是否为0</li><li>if(str.equals(“”))//判断内容是否为空</li></ul></li><li><p>null：这种定义空串的方式，相当于告诉计算机，我要一个字符串，但是里面没有任何内容。这种方式定义的字符串可以使用：if(str == null)进行判断。</p><h3 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h3><p>由于java的char类型是一个采用UTF-16编码表示的unicode码点的代码单元。前面也说过虽然这种方式能够容纳更多的字符，但是随之类似与中文这样表意的字符的加入，这种编码方式依然被挤爆了。所以java中有些字符占了两个代码单元。<br>于是，很自然的，Java中有以下两种方式求字符串分别来求两种不同角度的字符串长度。</p></li><li><p>length：返回字符串所需要的代码单元数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"world"</span>.length());<span class="comment">//将会返回5​</span></span><br></pre></td></tr></table></figure></li><li><p>codePointCount(0,str.length()):返回实际的长度，即码点数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"world⊕"</span>.codePointCount(<span class="number">0</span>,<span class="string">"world⊕"</span>.length()));<span class="comment">//返回7，⊕字符需要使用两个代码单元​</span></span><br></pre></td></tr></table></figure><h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><p>charAt(n)：返回位置n的代码单元</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"world"</span>.charAt(<span class="number">0</span>));<span class="comment">//将返回w</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>这里记录Java中三种方式对字符串进行遍历（当不止这三种方式）<br>方法一：charAt方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; str.length();i++) &#123;</span><br><span class="line"></span><br><span class="line"> System.out.println(str.charAt(i)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：substring方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; str.length();i++) &#123;</span><br><span class="line"></span><br><span class="line"> System.out.println(str.substring(i,i+<span class="number">1</span>)); </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：toCharArray方法，将字符串方法转换成字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[]  c = str.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; c.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>最后java中的string类有数千个方法，这里不可能逐个解释，也不需要对每一个都了如&gt;指掌，有需要的时候可以访问java的额API文档进行了解: <a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/</a></p></blockquote><h2 id="浅谈Java不可变类"><a href="#浅谈Java不可变类" class="headerlink" title="浅谈Java不可变类"></a>浅谈Java不可变类</h2><p>在java中有很多的不可变类，例如Interger、Long、String。<br>Java将不可变类放到了一个公共的存储池中。我们定义一个字符串str，然后将它初始化为“hello”，实际上其过程可以理解为，计算机划分了一块空间，然后将str1指向它。这块空间里面的东西将无法改变,但是str在字符串确可以指向其他的在字符串</p><img src="/quandongli.github.io/post/undefined/%E4%B8%8D%E5%8F%AF%E5%8F%981.png" class title="不可变1"><p>现在在定义一个字符串str2，其值也初始化为hello，进行==判断将会判断为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      String str1 = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//显示为true</span></span><br></pre></td></tr></table></figure><p>这是因为str2也指向了这个hello在字符串所在的空间</p><img src="/quandongli.github.io/post/undefined/%E4%B8%8D%E5%8F%AF%E5%8F%982.png" class title="不可变2"><p>但是如果现在定义一个在字符串str3，虽然str3也初始化为hello，但是初始化的方式是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str2 = <span class="string">"hel"</span>;</span><br><span class="line">String str3 = str2+<span class="string">"lo"</span>;</span><br></pre></td></tr></table></figure><p>现在分别进行==判断和用equals方法进行判断将会得到不同的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str2 = <span class="string">"hel"</span>;</span><br><span class="line">String str3 = str2+<span class="string">"lo"</span>;</span><br><span class="line">System.out.println(str1 == str3);<span class="comment">//false</span></span><br><span class="line">System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>这是因为Java实际上只是共享了字符串的字面量（即hello这个值），但是对于+和substring等方法的得到的字符串却不会进行共享。</p><img src="/quandongli.github.io/post/undefined/%E4%B8%8D%E5%8F%AF%E5%8F%983.png" class title="不可变3"><p>设计不可变类型的最大的好处就是当需要进行复制一个字符串变量是，只需要将这个变量指向共享的空间就可以了。但是也为诸如提取字串、拼接等带来了麻烦。但是java设计者认为共享空间带来的好处更大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Java中字符串是用双引号引起来的一串字符或unicode序列，例如：”hello”就是一个在字符串，Java中使用string类对字符串进
      
    
    </summary>
    
    
      <category term="java" scheme="https://quandongli.github.io/categories/java/"/>
    
      <category term="字符串" scheme="https://quandongli.github.io/categories/java/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-java -字符串" scheme="https://quandongli.github.io/tags/java-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之运算符</title>
    <link href="https://quandongli.github.io/post/e0ba64a3.html"/>
    <id>https://quandongli.github.io/post/e0ba64a3.html</id>
    <published>2020-01-11T05:05:15.000Z</published>
    <updated>2020-01-11T05:20:42.601Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章将会对Java语言中的计算规则进行总结，内容包括：</p><ul><li>基本运算符</li><li>Java中使用数学函数</li><li>类型转换</li><li>赋值操作</li><li>关系运算</li><li>位运算</li><li>运算优先级<a id="more"></a></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>&emsp;&emsp;在Java中加、减、乘的运算符号分别是+ 、- 、 *，其运算结果与实际生活中数学计算的结果一致，但是对于除法计算，在计算机中存在较大的差异。<br>&emsp;&emsp;在java中不存在除法运算符，只存在取模运算（/）和取余运算（%），取模运算就是取整运算，取余运算将会得到余数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>/<span class="number">2</span>);<span class="comment">//将会输出2</span></span><br><span class="line">System.out.println(<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//将会输出1</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在java中“=”，是赋值的意思（将右边的值赋给左边的变量），而非判断两个数值是否相等（在java中判断是否相等用“==”）。<br>&emsp;&emsp;在Java中也存在着一些“简写”形式的表达式子。比如：如果表达式为x = x+4;可以写成x+=4.（同样的有+=、-=、=、%=等）；表达是i++(或i–)表示i自增（自减）1，需要注意的是，这种写法表示的是先使用i的值，使用完之后i再自增（自减）1，而++i（–i）表示的是先将i的是进行自增（自减）1，再使用i的值。</p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>&emsp;&emsp;对于需要进行的诸如幂运算、开方、取对数等数学运算，Java中Math类来提供了各种各样的额数学运算，例如：求平方根的sqrt(),幂运算的pow等。使用math类可以通过两种方式，一种是直接使用，如：Math.sqrt(),也可以在程序中引入math类，再程序的开始处加上“import static java.lang.Math.*;”即可，之后再使用sqrt函数直接写即可。<br>&emsp;&emsp;再math类中还提供了一种“特殊”的取模运算。再java程序中如果直接使用/进行取模，如果计算的被除数是一个负数，那么得到的结果也将会是一个负数。比如-5/2将会得到的是-2而不是日常数学计算中的2，math类中提供了floorMod方法可以将这种情况下的计算结果取正，但是对于除数是负数的情况，也将无能为力。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>&emsp;&emsp;在java中有两种情况将会发生类型转换。<br>&emsp;&emsp;一种是当二元运算符（如+）连接的两个数值中类型不同时，则计算结果的类型将会转换为两者中精度更高的类型，比如float%int类型，其计算结果将会是float类型。<br>&emsp;&emsp;另外一种情况就是进行强制类型转换时，例如int i = (int)n;那么无论n的数值是一个什么类型都会被转换为int类型。<br>&emsp;&emsp;java中将浮点数转换为整数时，该方式将直接将小数部分截断，例如2.6转换为int类型的结果是2。math类中的round方法进行类型转换时将取一个最接近的数。如9.8将会转换为10但是9.1将会转换为9。<br>&emsp;&emsp;在进行类型转换的过程有些类型之间的转换将会产生信息损失，有些则不会。下图展现的就是在二元运算符中发生类型转换时的情形。</p><img src="/quandongli.github.io/post/e0ba64a3/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png" class title="类型转换"><h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><p>&emsp;&emsp;java中存在以下几种位运算：</p><ol><li>==或!=（&gt; 、&lt;、&gt;=、&lt;=也类似）：判断两个值是都相等或不相等，是则返回true，否则返回false</li><li>与：A&amp;&amp;B：两者中有一个为false则表达式为false；<strong>如果A已经判断为false则B将不会进行计算</strong></li><li>或：A||B：两者中有一个为true则表达式结果为true；<strong>如果A已经判断为true则B将不会进行计算</strong></li><li>非！：取反，false变true，true变false</li><li>三目运算符：condition?expression1:expression2：如果condition为真则用expression1，否者用expression2<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2>&emsp;&emsp;java中存在以下几种位运算：</li><li>非 ~：将二进制的1变为0，0变为1</li><li>按位或|：两个操作数其中一个是1时就是1</li><li>按位与&amp;：两个操作数都是1时才是1</li><li>异或：java中没有同或从高位开始比较，如果相同则为0，不相同则为1。(java中没有同或)</li><li>右移 A&lt; &lt; X：将操作数A按二进制向右移x位</li><li>左移：A&gt;&gt;X：将操作数A按二进制向左移x位</li><li>无符号右移：A&gt;&gt;&gt;x：将操作数A按二进制向右移x位，并用零填充最高位。<br>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j,k,p,q,s,d,f;</span><br><span class="line">j = <span class="number">10</span> | <span class="number">0b1100</span>;</span><br><span class="line">k = <span class="number">10</span> &amp; <span class="number">0b1100</span>;</span><br><span class="line">p = ~<span class="number">10</span>;</span><br><span class="line">q = <span class="number">10</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line">s = <span class="number">10</span> &gt;&gt; <span class="number">3</span>;</span><br><span class="line">d = -<span class="number">10</span>&gt;&gt;&gt;<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"i = "</span> + Integer.toBinaryString(i));<span class="comment">//1010</span></span><br><span class="line">System.out.println(<span class="string">"j = "</span> +Integer.toBinaryString(j));<span class="comment">//1110</span></span><br><span class="line">System.out.println(<span class="string">"k = "</span> +Integer.toBinaryString(k));<span class="comment">//1000</span></span><br><span class="line">System.out.println(<span class="string">"p = "</span> +Integer.toBinaryString(p));<span class="comment">//11111111111111111111111111110101</span></span><br><span class="line">System.out.println(<span class="string">"q = "</span> +Integer.toBinaryString(q));<span class="comment">//1010000</span></span><br><span class="line">System.out.println(<span class="string">"s = "</span> +Integer.toBinaryString(s));<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">"d = "</span> +Integer.toBinaryString(d));<span class="comment">//1111111111111111111111111111011</span></span><br></pre></td></tr></table></figure><h2 id="运算的优先级"><a href="#运算的优先级" class="headerlink" title="运算的优先级"></a>运算的优先级</h2>如果使用圆括号，则按照运算符的优先级进行运算。同一级别的运算符将会按照从左到右的次序进行计算（一些右结合的运算符除外），例如a&amp;&amp;b||c就相当于(a&amp;&amp;b)||c,具体运算符优先级见下图：<img src="/quandongli.github.io/post/e0ba64a3/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class title="运算符优先级"></li></ol><p><a href="https://mubu.com/doc/17UMhlGHaA" target="_blank" rel="noopener" title="思维导图链接">查看幕布思维导图版请点此处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章将会对Java语言中的计算规则进行总结，内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本运算符&lt;/li&gt;
&lt;li&gt;Java中使用数学函数&lt;/li&gt;
&lt;li&gt;类型转换&lt;/li&gt;
&lt;li&gt;赋值操作&lt;/li&gt;
&lt;li&gt;关系运算&lt;/li&gt;
&lt;li&gt;位运算&lt;/li&gt;
&lt;li&gt;运算优先级&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://quandongli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://quandongli.github.io/tags/java/"/>
    
      <category term="运算符" scheme="https://quandongli.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java编程基础之变量与常量</title>
    <link href="https://quandongli.github.io/post/1b17473c.html"/>
    <id>https://quandongli.github.io/post/1b17473c.html</id>
    <published>2020-01-10T03:18:32.000Z</published>
    <updated>2020-01-11T05:19:29.588Z</updated>
    
    <content type="html"><![CDATA[<p>再编程语言中变量与常量是两个非常重要且基础的两个概念，变量的声明是编程中一个基本操作。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>&emsp;&emsp;变量是指再程序运行的过程中存储可以变化的数据，声明一个变量，将向系统申请一块内存（大小由变量的类型决定）,常量是指再程序运行期间不变的数据。<br>&emsp;&emsp;变量就好比是一个水果篮，里面可以放苹果、香蕉等各种水果，里面放的东西是可以变的，但是苹果始终是苹果，不会变成香蕉。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>&emsp;&emsp;变量再使用前都需要进行声明，在java中声明变量的格式为：类型名 变量名;，比如double salary；这里就声明了一个double类型的名为salary变量。<br>&emsp;&emsp;变量的命名需要遵循以下几点规则：</p><ol><li>变量名必须是以字母开关并以字母或数字构成的序列。<blockquote><p>这里的字母包括Unicode编码所包含的所有表示字母的字符，如：_、$<br>要想知道某个字符是不是unicode中定义的字母可以使用Charcter类中的isJavaIdentifierStart和isJavaIdentifierPart方法进行判断​​</p></blockquote></li><li>不能使用java中的保留字作为变量名，如；int，double等</li><li>Java中变量名是区分大小写的</li><li>变量名没有长度限制<h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2>&emsp;&emsp;在声明变量名之后，应该使用赋值语句对该变量进行初始化，使用未初始化的变量的值将会导致程序错误。比如以下操作，编译器会进行报错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">System.out.println(num);<span class="comment">//num变量里面什么内容都没有，无法打印</span></span><br></pre></td></tr></table></figure>但是如果进行如下操作将回正常输出：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">11</span>;</span><br><span class="line">System.out.println(num);<span class="comment">//将会输出11</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2>在java中常量的声明方式是final 类型名 变量名;比如final int NUM = 11;<blockquote><p>与c语言中定义常量不同的是，c语言中常量的使用的是#define，且不需要指定常量的类型，用等号进行赋值，没有分号<br>在Java中使用final声明的常量，需要注意以下几点：</p></blockquote></li><li>final变量不能再次赋值；</li><li>final方法不能被重写；</li><li>final类不能被继承；</li><li>如果常量定义再main方法的内部，则该类的其他方法也能够使用这个常量</li><li>如果这个常量被public修饰，则这个常量也可以被其他类使用</li></ol><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>在编程实践时，有时候一个变量只会在几个值之间取值，比如描述日常生活中衣服的尺码时，一般就只有S、M、L、X等，这时候就可以使用枚举类型来表示衣服的尺寸。定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Size &#123;SMALL,MEDIUM,LARGE&#125;;</span><br></pre></td></tr></table></figure><p>使用这个枚举类型，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size s = Size.MEDIUM;</span><br></pre></td></tr></table></figure><p><a href="https://mubu.com/doc/3qZ-EKYdHw" target="_blank" rel="noopener" title="思维导图链接">查看幕布思维导图版请点此处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再编程语言中变量与常量是两个非常重要且基础的两个概念，变量的声明是编程中一个基本操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://quandongli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://quandongli.github.io/tags/java/"/>
    
      <category term="变量与常量" scheme="https://quandongli.github.io/tags/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之四种基础类型</title>
    <link href="https://quandongli.github.io/post/2f86de21.html"/>
    <id>https://quandongli.github.io/post/2f86de21.html</id>
    <published>2020-01-09T12:19:52.000Z</published>
    <updated>2020-01-09T12:28:09.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java数据类型概述"><a href="#java数据类型概述" class="headerlink" title="java数据类型概述"></a>java数据类型概述</h2><p>在java语言中有四类八种基本类型分别是：</p><a id="more"></a><ol><li>整型：long、int、short、byte</li><li>浮点型：double、float</li><li>char</li><li>boolean（布尔类型）</li></ol><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>整型表示是没有小数部分的数值。在java中有定义了四种整型常量，他们表示范围从小到大分别是：</p><ul><li>长整型long：占8个字节</li><li>整型int：占4个字节</li><li>短整型short：占2个字节</li><li>byte：占1个字节</li></ul><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768 ~ 32767</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128-127</td></tr></tbody></table><p>在java中整数类型与c语言中有几个不同点</p><ol><li>第一个不同点是，在Java语言中支持在为数值字面量加下划线，方便阅读，比如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1000_000_000</span>);<span class="comment">//将输出为1000000000</span></span><br></pre></td></tr></table></figure></li><li>Java中每个类型所占的字节大小不会随着运行系统的变化而变化。这主要要是为了满足Java的设计目标：一处编译、处处运行。</li><li>第二个不同点，也是重要的不同点是，在Java语言中不支持无符号（unsigned）类型的整型，在Java中如果要表示一个无符号类型的数字将会是一个比较麻烦的事情（一般是通过升级类型，比如将byte类型升级为int类型，将int类型转换为long类型或者通过位运算）。</li></ol><p><strong>关于unsigned类型在以后遇到再进行详细讨论</strong></p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>所谓的浮点类型就是可以表示小数部分的数值，在Java中有两种浮点类型：<br>|类型|存储需求|取值范围|<br>|:-:|:-:|:-:|<br>|float|4字节|大约为+-3.40282347E+38F(有效位数为6~7位)|<br>|double|8字节|大约1.79769313486231570E+308（有效位数为15位）|<br>double表示的这种数值精度是float类型的两倍，所以一般称float类型为单精度浮点类型，double类型为双精度浮点类型。一般情况下小数默认为double类型。可以在小数数值后面加上一个f或者F将该数值表示为float类型。double类型可以在小数数值后面添加d或者D表示（也可以不加，直接默认）。</p><h2 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h2><p>&emsp;&emsp;char类型表示的是一个在字符，占两个字节，其的字面量值是用一个单引号引起来的一个字符，如’a’，但是不能用单引号引两个或以上的字符，如：’ab’,如果需要引两个或以上的字符这需要用一对双引号，这样表示的将会是字符串。<br>&emsp;&emsp;在Java中char类型是一个采用UTF-16编码表示Unicode码点的代码单元，这样做的原因是不同的编码方案下可能对应着不同的字母，且有些字母短一个字节就可以表示，但是有写字节表示比较长需要两个字节或多个字节，于是java设计者为了避免这样的事情发生（Java的设计思想是不管程序在哪运行，运行的结果都要一样），在初期效果确实达到了，但是随着中国等国家的表意文字的出现，这种设计也随之崩溃。于是乎，这种设计使得Java中的char类型并不是一个“称职”的类型，比如在字符串的一些操作中很容易产生错误，所以现在都<strong>强烈建议不要在java中使用char类型</strong></p><h2 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h2><p>Boolean（布尔）类型只有两个值：false以及true，用来判断逻辑条件。这里需要注意的是在java中<strong>整形和布尔值之间不能进行相互交换</strong>，在c语言中false可以用0来表示，true可以用1来表示，但是在Java中却不可以这样表示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java数据类型概述&quot;&gt;&lt;a href=&quot;#java数据类型概述&quot; class=&quot;headerlink&quot; title=&quot;java数据类型概述&quot;&gt;&lt;/a&gt;java数据类型概述&lt;/h2&gt;&lt;p&gt;在java语言中有四类八种基本类型分别是：&lt;/p&gt;
    
    </summary>
    
    
      <category term="-java" scheme="https://quandongli.github.io/categories/java/"/>
    
    
      <category term="-Java -基础类型" scheme="https://quandongli.github.io/tags/Java-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>web入门课程之基础知识</title>
    <link href="https://quandongli.github.io/post/a594f8b3.html"/>
    <id>https://quandongli.github.io/post/a594f8b3.html</id>
    <published>2020-01-03T04:22:51.000Z</published>
    <updated>2020-01-05T04:37:48.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><a id="more"></a><ol><li>C/S架构:Client/Server 客户端/服务器端<blockquote><p>在用户本地有一个客户端程序，在远程有一个服务器端程序<br>例如：QQ、迅雷。。。<br>缺点：</p><ol><li>开发、安装、部署、维护麻烦。<br>优点：</li><li>用户体验好</li></ol></blockquote></li><li>B/S：Browser/Server 浏览器/服务器端<blockquote><p>只需要一个浏览器，用户通过不同的网址（url），访问不同的服务器端程序<br>优点：</p><ol><li>开发、安装、部署、维护简单。<br>缺点：</li><li>如果应用过大，用户的体验可能会受到影响</li><li>对硬件要求过高</li></ol></blockquote><h1 id="B-S架构简介"><a href="#B-S架构简介" class="headerlink" title="B/S架构简介"></a>B/S架构简介</h1></li><li>资源分类<ol><li>静态资源<ul><li>使用静态网页技术开发发布的资源</li><li>特点：1. 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li><li>如：文本、图片、音频、视频、HTML、CSS、JavaScript</li></ul></li><li>动态资源<ul><li>使用动态网页及时发布的资源</li><li>特点：1. 所有用户访问，得到的结果可能不一样。</li><li><ol start="2"><li>如果用户请求的是动态资源，那么服务器就会执行动态资源，转换为静态资源，再发送给浏览器。</li></ol></li><li>如：jsp/servlet、php、sap…</li></ul></li></ol></li></ol><h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><ul><li>HTML：用于搭建基础页面，展示页面</li><li>CSS：用户美化页面，布局页面</li><li>JavaScript：控制页面的元素，让页面有一些动态效果。<br></li></ul><img src="/quandongli.github.io/post/a594f8b3/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.jpg" class title="spaced title">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; title=&quot;软件架构&quot;&gt;&lt;/a&gt;软件架构&lt;/h1&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://quandongli.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web" scheme="https://quandongli.github.io/categories/%E5%89%8D%E7%AB%AF/web/"/>
    
    
      <category term="web" scheme="https://quandongli.github.io/tags/web/"/>
    
      <category term="html" scheme="https://quandongli.github.io/tags/html/"/>
    
  </entry>
  
</feed>
